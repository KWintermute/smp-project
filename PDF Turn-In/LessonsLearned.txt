Lessons Learned:

	This was a confusing project to work on from the moment we first saw the code. The description of what we were supposed to do had sounded amazingly strait forward; read and interpret the code, write C functions that do what the code does, have R call the C functions to get the same result faster. All of us were familiar with C and that sounded not too complicated. The first and perhaps biggest lesson we learned is that it’s (almost always) trickier than it looks. Among other challenges that we may not have fully anticipated were challenges with both interfacing R to C even using libraries designed to do that, the need to manually refractor some libraries to compile code for them, differences in how the interfacing works based on operating systems, and the simple fact that R is in many ways an awkward language to work with if you’re used to more conventional modern languages.
	Our second big take away was the importance of training. There was so little actual work to do for this project that a single person who was trained in C and R and knew how to integrate RcppArmadillo could have completed all the C code we did, tested it, come to the same conclusion we did, and implement our alternate solution in a single busy afternoon. However, it took us much longer and even were we not busy with school and other projects it would still have taken the six of us significantly more time to get to that point. A lot of the time we spent in our meetings effectively was training as we taught each other the things we’d been able to figure out about R, about RcppArmadillo, about github, ect. You could truly argue that the vast majority of the time we spent on the project was training and research. Now, much of this was because our project mostly turned out to be a case of the ‘burden of knowledge’ but in any project there will be some burden of knowledge and the less time you spend catching everyone up to snuff on the generalities the quicker you can discover and attack the problems specific to your project. In this project one specifically trained developer could have easily been ten times as productive as six untrained interns.
	A third primary lesson we took away from the project was on how it’s worth aiming to test/prototype early for projects with decent uncertainty. Granted, we don’t feel that there was much uncertainty on the ‘can we get all the C code done front’ but we did not give ourselves much time to account for the possibility that converting to C would not offer much in the way of optimization. Now we were able to put together alternate solutions and get them tested before it was time to present but we were cutting it close and if our alternate solutions hadn’t been so strait forward we may not have had much to show.
	The final main lesson we learned was how it really helps to be in contact with your customer, especially on a project like this where the customer is already immersed in the technical details of the project. Several times on the project we would end up stuck and sometimes we were able to figure out ways around it ourself, however, every time we were able to get into contact with the customer and talk to him about it we always were able to make some major step forward beyond the spot we were stuck before. We weren’t given all the code we needed to test our code until we went back and got it from him and it had a similar effect on our project to what might happen if the customer wasn’t exactly sure what he wanted in the first place and you had to go back and get him to come see your prototype.